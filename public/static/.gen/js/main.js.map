{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/handlebars/dist/cjs/lib/handlebars.runtime.js","node_modules/handlebars/dist/cjs/handlebars/lib/handlebars/base.js","node_modules/handlebars/dist/cjs/handlebars/lib/handlebars/decorators.js","node_modules/handlebars/dist/cjs/handlebars/decorators/lib/handlebars/decorators/inline.js","node_modules/handlebars/dist/cjs/handlebars/lib/handlebars/exception.js","node_modules/handlebars/dist/cjs/handlebars/lib/handlebars/helpers.js","node_modules/handlebars/dist/cjs/handlebars/helpers/lib/handlebars/helpers/block-helper-missing.js","node_modules/handlebars/dist/cjs/handlebars/helpers/lib/handlebars/helpers/each.js","node_modules/handlebars/dist/cjs/handlebars/helpers/lib/handlebars/helpers/helper-missing.js","node_modules/handlebars/dist/cjs/handlebars/helpers/lib/handlebars/helpers/if.js","node_modules/handlebars/dist/cjs/handlebars/helpers/lib/handlebars/helpers/log.js","node_modules/handlebars/dist/cjs/handlebars/helpers/lib/handlebars/helpers/lookup.js","node_modules/handlebars/dist/cjs/handlebars/helpers/lib/handlebars/helpers/with.js","node_modules/handlebars/dist/cjs/handlebars/lib/handlebars/logger.js","node_modules/handlebars/dist/cjs/handlebars/node_modules/handlebars/dist/cjs/handlebars/lib/handlebars/no-conflict.js","node_modules/handlebars/dist/cjs/handlebars/lib/handlebars/runtime.js","node_modules/handlebars/dist/cjs/handlebars/lib/handlebars/safe-string.js","node_modules/handlebars/dist/cjs/handlebars/lib/handlebars/utils.js","node_modules/handlebars/runtime.js","node_modules/hbsfy/runtime.js","website/frontend/all_bets/main.coffee","website/frontend/all_bets/tmpl/test.hbs","website/frontend/app.coffee","website/frontend/layout/layout.coffee","website/frontend/layout/tmpl/mainView.hbs","website/frontend/layout/tmpl/menu.hbs","website/frontend/layout/tmpl/topHeader.hbs","website/frontend/logout/main.coffee","website/frontend/logout/tmpl/logout.hbs","website/frontend/open_bets/group.coffee","website/frontend/open_bets/groups_example.coffee","website/frontend/open_bets/main.coffee","website/frontend/open_bets/models.coffee","website/frontend/open_bets/tmpl/game.hbs","website/frontend/open_bets/tmpl/group.hbs","website/frontend/open_bets/tmpl/group_stage.hbs","website/frontend/open_bets/tmpl/main_form.hbs","website/frontend/open_bets/tmpl/score.hbs","website/frontend/open_bets/tmpl/scoreSelect.hbs","website/frontend/open_bets/tmpl/table.hbs","website/frontend/sign_in/main.coffee","website/frontend/sign_in/tmpl/sign_in.hbs","website/frontend/utils.coffee"],"names":[],"mappings":"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;IACA,IAAC,CAAA,eAAD,GAAmB,IAAI,eAAJ,CAAoB,IAAC,CAAA,QAAD,CAAA,CAApB;IACnB,IAAC,CAAA,QAAD,CAAU,IAAC,CAAA,eAAX,EAA4B,QAA5B,EAAsC,IAAC,CAAA,UAAvC;WACA,IAAC,CAAA,eAAe,CAAC,MAAM,CAAC,OAAxB,CAAgC,CAAA,SAAA,KAAA;aAAA,SAAC,KAAD;eAAS,KAAC,CAAA,QAAD,CAAU,KAAV;MAAT;IAAA,CAAA,CAAA,CAAA,IAAA,CAAhC;EANQ;;;;GArGS,QAAQ,CAAC;;AA6G5B;;;;;;;4BACF,KAAA,GAAO;;;;GADmB,QAAQ,CAAC;;AAGjC;;;;;;;4BACF,KAAA,GAAO;;;AACP;;;;;;;;;GAF0B,QAAQ,CAAC;;AAQjC;;;;;;;6BACF,KAAA,GAAO;;;;GADoB,QAAQ,CAAC;;AAKxC,MAAM,CAAC,OAAP,GAAiB;EACb,SAAA,EAAW,SADE;EAEb,UAAA,EAAY,UAFC;EAGb,SAAA,EAAW,SAHE;EAIb,SAAA,EAAW,SAJE;EAKb,gBAAA,EAAkB,gBALL;;;;;AC/RjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA,IAAA,wBAAA;EAAA;;;;AAAA,UAAA,GAAa,OAAA,CAAQ,oBAAR;;AAEP;;;;;;;;yBACF,QAAA,GAAU;;yBACV,SAAA,GAAW;;yBACX,IAAA,GAAM;;yBACN,EAAA,GACI;IAAA,IAAA,EAAM,cAAN;IACA,QAAA,EAAU,gBADV;IAEA,KAAA,EAAO,aAFP;;;yBAGJ,MAAA,GACI;IAAA,iBAAA,EAAmB,QAAnB;;;yBAEJ,MAAA,GAAQ,SAAC,CAAD;AACJ,QAAA;IAAA,CAAC,CAAC,cAAF,CAAA;IACA,QAAA,GAAW;MACP,KAAA,EAAO,IAAC,CAAA,EAAE,CAAC,KAAK,CAAC,GAAV,CAAA,CADA;MAEP,QAAA,EAAU,IAAC,CAAA,EAAE,CAAC,QAAQ,CAAC,GAAb,CAAA,CAFH;;IAIX,GAAA,GAAM;WACN,KAAK,CAAC,IAAN,CAAW,GAAX,EAAgB,QAAhB,CACI,CAAC,IADL,CACW,CAAA,SAAA,KAAA;aAAA,SAAC,QAAD;AACH,YAAA;QAAA,IAAA,GAAO,QAAQ,CAAC;eAChB,KAAC,CAAA,OAAD,CAAS,SAAT,EAAoB,IAApB;MAFG;IAAA,CAAA,CAAA,CAAA,IAAA,CADX,CAKI,EAAC,KAAD,EALJ,CAKY,CAAA,SAAA,KAAA;aAAA,SAAC,KAAD;eACJ,OAAO,CAAC,GAAR,CAAY,KAAZ;MADI;IAAA,CAAA,CAAA,CAAA,IAAA,CALZ;EAPI;;;;GAXe,UAAU,CAAC;;AA6BtC,MAAM,CAAC,OAAP,GAAiB;;;;AC/BjB;AACA;AACA;AACA;AACA;AACA;;ACLA,IAAA;;AAAA,UAAA,GAAa,SAAC,GAAD;AACT,MAAA;EAAA,GAAA,GAAK;IACD,QAAA,EAAU,OADT;IAED,cAAA,EAAgB,aAFf;IAGD,OAAA,EAAS,OAHR;IAID,SAAA,EAAW,WAJV;IAKD,UAAA,EAAY,SALX;IAMD,OAAA,EAAS,MANR;IAOD,SAAA,EAAW,OAPV;IAQD,MAAA,EAAQ,OARP;IASD,QAAA,EAAU,MATT;IAUD,WAAA,EAAa,UAVZ;IAWD,MAAA,EAAQ,KAXP;IAYD,SAAA,EAAW,OAZV;IAaD,WAAA,EAAa,UAbZ;IAcD,SAAA,EAAW,QAdV;IAeD,SAAA,EAAW,SAfV;IAgBD,SAAA,EAAW,QAhBV;IAiBD,QAAA,EAAU,OAjBT;IAkBD,aAAA,EAAe,OAlBd;IAmBD,YAAA,EAAc,YAnBb;IAoBD,QAAA,EAAU,OApBT;IAqBD,SAAA,EAAW,QArBV;IAsBD,QAAA,EAAU,QAtBT;IAuBD,QAAA,EAAU,OAvBT;IAwBD,aAAA,EAAe,aAxBd;IAyBD,SAAA,EAAW,OAzBV;IA0BD,QAAA,EAAU,MA1BT;IA2BD,SAAA,EAAW,SA3BV;IA4BD,SAAA,EAAW,QA5BV;IA6BD,QAAA,EAAU,OA7BT;IA8BD,SAAA,EAAW,MA9BV;IA+BD,UAAA,EAAY,UA/BX;IAgCD,OAAA,EAAS,KAhCR;;AAmCL,0CAAkB;AApCT;;AAsCb,MAAM,CAAC,OAAP,GACI;EAAA,UAAA,EAAY,UAAZ","file":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import * as base from './handlebars/base';\n\n// Each of these augment the Handlebars object. No need to setup here.\n// (This is done to easily share code between commonjs and browse envs)\nimport SafeString from './handlebars/safe-string';\nimport Exception from './handlebars/exception';\nimport * as Utils from './handlebars/utils';\nimport * as runtime from './handlebars/runtime';\n\nimport noConflict from './handlebars/no-conflict';\n\n// For compatibility and usage outside of module systems, make the Handlebars object a namespace\nfunction create() {\n  let hb = new base.HandlebarsEnvironment();\n\n  Utils.extend(hb, base);\n  hb.SafeString = SafeString;\n  hb.Exception = Exception;\n  hb.Utils = Utils;\n  hb.escapeExpression = Utils.escapeExpression;\n\n  hb.VM = runtime;\n  hb.template = function(spec) {\n    return runtime.template(spec, hb);\n  };\n\n  return hb;\n}\n\nlet inst = create();\ninst.create = create;\n\nnoConflict(inst);\n\ninst['default'] = inst;\n\nexport default inst;\n","import {createFrame, extend, toString} from './utils';\nimport Exception from './exception';\nimport {registerDefaultHelpers} from './helpers';\nimport {registerDefaultDecorators} from './decorators';\nimport logger from './logger';\n\nexport const VERSION = '4.0.4';\nexport const COMPILER_REVISION = 7;\n\nexport const REVISION_CHANGES = {\n  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it\n  2: '== 1.0.0-rc.3',\n  3: '== 1.0.0-rc.4',\n  4: '== 1.x.x',\n  5: '== 2.0.0-alpha.x',\n  6: '>= 2.0.0-beta.1',\n  7: '>= 4.0.0'\n};\n\nconst objectType = '[object Object]';\n\nexport function HandlebarsEnvironment(helpers, partials, decorators) {\n  this.helpers = helpers || {};\n  this.partials = partials || {};\n  this.decorators = decorators || {};\n\n  registerDefaultHelpers(this);\n  registerDefaultDecorators(this);\n}\n\nHandlebarsEnvironment.prototype = {\n  constructor: HandlebarsEnvironment,\n\n  logger: logger,\n  log: logger.log,\n\n  registerHelper: function(name, fn) {\n    if (toString.call(name) === objectType) {\n      if (fn) { throw new Exception('Arg not supported with multiple helpers'); }\n      extend(this.helpers, name);\n    } else {\n      this.helpers[name] = fn;\n    }\n  },\n  unregisterHelper: function(name) {\n    delete this.helpers[name];\n  },\n\n  registerPartial: function(name, partial) {\n    if (toString.call(name) === objectType) {\n      extend(this.partials, name);\n    } else {\n      if (typeof partial === 'undefined') {\n        throw new Exception(`Attempting to register a partial called \"${name}\" as undefined`);\n      }\n      this.partials[name] = partial;\n    }\n  },\n  unregisterPartial: function(name) {\n    delete this.partials[name];\n  },\n\n  registerDecorator: function(name, fn) {\n    if (toString.call(name) === objectType) {\n      if (fn) { throw new Exception('Arg not supported with multiple decorators'); }\n      extend(this.decorators, name);\n    } else {\n      this.decorators[name] = fn;\n    }\n  },\n  unregisterDecorator: function(name) {\n    delete this.decorators[name];\n  }\n};\n\nexport let log = logger.log;\n\nexport {createFrame, logger};\n","import registerInline from './decorators/inline';\n\nexport function registerDefaultDecorators(instance) {\n  registerInline(instance);\n}\n\n","import {extend} from '../utils';\n\nexport default function(instance) {\n  instance.registerDecorator('inline', function(fn, props, container, options) {\n    let ret = fn;\n    if (!props.partials) {\n      props.partials = {};\n      ret = function(context, options) {\n        // Create a new partials stack frame prior to exec.\n        let original = container.partials;\n        container.partials = extend({}, original, props.partials);\n        let ret = fn(context, options);\n        container.partials = original;\n        return ret;\n      };\n    }\n\n    props.partials[options.args[0]] = options.fn;\n\n    return ret;\n  });\n}\n","\nconst errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];\n\nfunction Exception(message, node) {\n  let loc = node && node.loc,\n      line,\n      column;\n  if (loc) {\n    line = loc.start.line;\n    column = loc.start.column;\n\n    message += ' - ' + line + ':' + column;\n  }\n\n  let tmp = Error.prototype.constructor.call(this, message);\n\n  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.\n  for (let idx = 0; idx < errorProps.length; idx++) {\n    this[errorProps[idx]] = tmp[errorProps[idx]];\n  }\n\n  /* istanbul ignore else */\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, Exception);\n  }\n\n  if (loc) {\n    this.lineNumber = line;\n    this.column = column;\n  }\n}\n\nException.prototype = new Error();\n\nexport default Exception;\n","import registerBlockHelperMissing from './helpers/block-helper-missing';\nimport registerEach from './helpers/each';\nimport registerHelperMissing from './helpers/helper-missing';\nimport registerIf from './helpers/if';\nimport registerLog from './helpers/log';\nimport registerLookup from './helpers/lookup';\nimport registerWith from './helpers/with';\n\nexport function registerDefaultHelpers(instance) {\n  registerBlockHelperMissing(instance);\n  registerEach(instance);\n  registerHelperMissing(instance);\n  registerIf(instance);\n  registerLog(instance);\n  registerLookup(instance);\n  registerWith(instance);\n}\n","import {appendContextPath, createFrame, isArray} from '../utils';\n\nexport default function(instance) {\n  instance.registerHelper('blockHelperMissing', function(context, options) {\n    let inverse = options.inverse,\n        fn = options.fn;\n\n    if (context === true) {\n      return fn(this);\n    } else if (context === false || context == null) {\n      return inverse(this);\n    } else if (isArray(context)) {\n      if (context.length > 0) {\n        if (options.ids) {\n          options.ids = [options.name];\n        }\n\n        return instance.helpers.each(context, options);\n      } else {\n        return inverse(this);\n      }\n    } else {\n      if (options.data && options.ids) {\n        let data = createFrame(options.data);\n        data.contextPath = appendContextPath(options.data.contextPath, options.name);\n        options = {data: data};\n      }\n\n      return fn(context, options);\n    }\n  });\n}\n","import {appendContextPath, blockParams, createFrame, isArray, isFunction} from '../utils';\nimport Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('each', function(context, options) {\n    if (!options) {\n      throw new Exception('Must pass iterator to #each');\n    }\n\n    let fn = options.fn,\n        inverse = options.inverse,\n        i = 0,\n        ret = '',\n        data,\n        contextPath;\n\n    if (options.data && options.ids) {\n      contextPath = appendContextPath(options.data.contextPath, options.ids[0]) + '.';\n    }\n\n    if (isFunction(context)) { context = context.call(this); }\n\n    if (options.data) {\n      data = createFrame(options.data);\n    }\n\n    function execIteration(field, index, last) {\n      if (data) {\n        data.key = field;\n        data.index = index;\n        data.first = index === 0;\n        data.last = !!last;\n\n        if (contextPath) {\n          data.contextPath = contextPath + field;\n        }\n      }\n\n      ret = ret + fn(context[field], {\n        data: data,\n        blockParams: blockParams([context[field], field], [contextPath + field, null])\n      });\n    }\n\n    if (context && typeof context === 'object') {\n      if (isArray(context)) {\n        for (let j = context.length; i < j; i++) {\n          if (i in context) {\n            execIteration(i, i, i === context.length - 1);\n          }\n        }\n      } else {\n        let priorKey;\n\n        for (let key in context) {\n          if (context.hasOwnProperty(key)) {\n            // We're running the iterations one step out of sync so we can detect\n            // the last iteration without have to scan the object twice and create\n            // an itermediate keys array.\n            if (priorKey !== undefined) {\n              execIteration(priorKey, i - 1);\n            }\n            priorKey = key;\n            i++;\n          }\n        }\n        if (priorKey !== undefined) {\n          execIteration(priorKey, i - 1, true);\n        }\n      }\n    }\n\n    if (i === 0) {\n      ret = inverse(this);\n    }\n\n    return ret;\n  });\n}\n","import Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('helperMissing', function(/* [args, ]options */) {\n    if (arguments.length === 1) {\n      // A missing field in a {{foo}} construct.\n      return undefined;\n    } else {\n      // Someone is actually trying to call something, blow up.\n      throw new Exception('Missing helper: \"' + arguments[arguments.length - 1].name + '\"');\n    }\n  });\n}\n","import {isEmpty, isFunction} from '../utils';\n\nexport default function(instance) {\n  instance.registerHelper('if', function(conditional, options) {\n    if (isFunction(conditional)) { conditional = conditional.call(this); }\n\n    // Default behavior is to render the positive path if the value is truthy and not empty.\n    // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n    if ((!options.hash.includeZero && !conditional) || isEmpty(conditional)) {\n      return options.inverse(this);\n    } else {\n      return options.fn(this);\n    }\n  });\n\n  instance.registerHelper('unless', function(conditional, options) {\n    return instance.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn, hash: options.hash});\n  });\n}\n","export default function(instance) {\n  instance.registerHelper('log', function(/* message, options */) {\n    let args = [undefined],\n        options = arguments[arguments.length - 1];\n    for (let i = 0; i < arguments.length - 1; i++) {\n      args.push(arguments[i]);\n    }\n\n    let level = 1;\n    if (options.hash.level != null) {\n      level = options.hash.level;\n    } else if (options.data && options.data.level != null) {\n      level = options.data.level;\n    }\n    args[0] = level;\n\n    instance.log(... args);\n  });\n}\n","export default function(instance) {\n  instance.registerHelper('lookup', function(obj, field) {\n    return obj && obj[field];\n  });\n}\n","import {appendContextPath, blockParams, createFrame, isEmpty, isFunction} from '../utils';\n\nexport default function(instance) {\n  instance.registerHelper('with', function(context, options) {\n    if (isFunction(context)) { context = context.call(this); }\n\n    let fn = options.fn;\n\n    if (!isEmpty(context)) {\n      let data = options.data;\n      if (options.data && options.ids) {\n        data = createFrame(options.data);\n        data.contextPath = appendContextPath(options.data.contextPath, options.ids[0]);\n      }\n\n      return fn(context, {\n        data: data,\n        blockParams: blockParams([context], [data && data.contextPath])\n      });\n    } else {\n      return options.inverse(this);\n    }\n  });\n}\n","import {indexOf} from './utils';\n\nlet logger = {\n  methodMap: ['debug', 'info', 'warn', 'error'],\n  level: 'info',\n\n  // Maps a given level value to the `methodMap` indexes above.\n  lookupLevel: function(level) {\n    if (typeof level === 'string') {\n      let levelMap = indexOf(logger.methodMap, level.toLowerCase());\n      if (levelMap >= 0) {\n        level = levelMap;\n      } else {\n        level = parseInt(level, 10);\n      }\n    }\n\n    return level;\n  },\n\n  // Can be overridden in the host environment\n  log: function(level, ...message) {\n    level = logger.lookupLevel(level);\n\n    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {\n      let method = logger.methodMap[level];\n      if (!console[method]) {   // eslint-disable-line no-console\n        method = 'log';\n      }\n      console[method](...message);    // eslint-disable-line no-console\n    }\n  }\n};\n\nexport default logger;\n","/* global window */\nexport default function(Handlebars) {\n  /* istanbul ignore next */\n  let root = typeof global !== 'undefined' ? global : window,\n      $Handlebars = root.Handlebars;\n  /* istanbul ignore next */\n  Handlebars.noConflict = function() {\n    if (root.Handlebars === Handlebars) {\n      root.Handlebars = $Handlebars;\n    }\n  };\n}\n","import * as Utils from './utils';\nimport Exception from './exception';\nimport { COMPILER_REVISION, REVISION_CHANGES, createFrame } from './base';\n\nexport function checkRevision(compilerInfo) {\n  const compilerRevision = compilerInfo && compilerInfo[0] || 1,\n        currentRevision = COMPILER_REVISION;\n\n  if (compilerRevision !== currentRevision) {\n    if (compilerRevision < currentRevision) {\n      const runtimeVersions = REVISION_CHANGES[currentRevision],\n            compilerVersions = REVISION_CHANGES[compilerRevision];\n      throw new Exception('Template was precompiled with an older version of Handlebars than the current runtime. ' +\n            'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');\n    } else {\n      // Use the embedded version info since the runtime doesn't know about this revision yet\n      throw new Exception('Template was precompiled with a newer version of Handlebars than the current runtime. ' +\n            'Please update your runtime to a newer version (' + compilerInfo[1] + ').');\n    }\n  }\n}\n\nexport function template(templateSpec, env) {\n  /* istanbul ignore next */\n  if (!env) {\n    throw new Exception('No environment passed to template');\n  }\n  if (!templateSpec || !templateSpec.main) {\n    throw new Exception('Unknown template object: ' + typeof templateSpec);\n  }\n\n  templateSpec.main.decorator = templateSpec.main_d;\n\n  // Note: Using env.VM references rather than local var references throughout this section to allow\n  // for external users to override these as psuedo-supported APIs.\n  env.VM.checkRevision(templateSpec.compiler);\n\n  function invokePartialWrapper(partial, context, options) {\n    if (options.hash) {\n      context = Utils.extend({}, context, options.hash);\n      if (options.ids) {\n        options.ids[0] = true;\n      }\n    }\n\n    partial = env.VM.resolvePartial.call(this, partial, context, options);\n    let result = env.VM.invokePartial.call(this, partial, context, options);\n\n    if (result == null && env.compile) {\n      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);\n      result = options.partials[options.name](context, options);\n    }\n    if (result != null) {\n      if (options.indent) {\n        let lines = result.split('\\n');\n        for (let i = 0, l = lines.length; i < l; i++) {\n          if (!lines[i] && i + 1 === l) {\n            break;\n          }\n\n          lines[i] = options.indent + lines[i];\n        }\n        result = lines.join('\\n');\n      }\n      return result;\n    } else {\n      throw new Exception('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');\n    }\n  }\n\n  // Just add water\n  let container = {\n    strict: function(obj, name) {\n      if (!(name in obj)) {\n        throw new Exception('\"' + name + '\" not defined in ' + obj);\n      }\n      return obj[name];\n    },\n    lookup: function(depths, name) {\n      const len = depths.length;\n      for (let i = 0; i < len; i++) {\n        if (depths[i] && depths[i][name] != null) {\n          return depths[i][name];\n        }\n      }\n    },\n    lambda: function(current, context) {\n      return typeof current === 'function' ? current.call(context) : current;\n    },\n\n    escapeExpression: Utils.escapeExpression,\n    invokePartial: invokePartialWrapper,\n\n    fn: function(i) {\n      let ret = templateSpec[i];\n      ret.decorator = templateSpec[i + '_d'];\n      return ret;\n    },\n\n    programs: [],\n    program: function(i, data, declaredBlockParams, blockParams, depths) {\n      let programWrapper = this.programs[i],\n          fn = this.fn(i);\n      if (data || depths || blockParams || declaredBlockParams) {\n        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);\n      } else if (!programWrapper) {\n        programWrapper = this.programs[i] = wrapProgram(this, i, fn);\n      }\n      return programWrapper;\n    },\n\n    data: function(value, depth) {\n      while (value && depth--) {\n        value = value._parent;\n      }\n      return value;\n    },\n    merge: function(param, common) {\n      let obj = param || common;\n\n      if (param && common && (param !== common)) {\n        obj = Utils.extend({}, common, param);\n      }\n\n      return obj;\n    },\n\n    noop: env.VM.noop,\n    compilerInfo: templateSpec.compiler\n  };\n\n  function ret(context, options = {}) {\n    let data = options.data;\n\n    ret._setup(options);\n    if (!options.partial && templateSpec.useData) {\n      data = initData(context, data);\n    }\n    let depths,\n        blockParams = templateSpec.useBlockParams ? [] : undefined;\n    if (templateSpec.useDepths) {\n      if (options.depths) {\n        depths = context !== options.depths[0] ? [context].concat(options.depths) : options.depths;\n      } else {\n        depths = [context];\n      }\n    }\n\n    function main(context/*, options*/) {\n      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);\n    }\n    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);\n    return main(context, options);\n  }\n  ret.isTop = true;\n\n  ret._setup = function(options) {\n    if (!options.partial) {\n      container.helpers = container.merge(options.helpers, env.helpers);\n\n      if (templateSpec.usePartial) {\n        container.partials = container.merge(options.partials, env.partials);\n      }\n      if (templateSpec.usePartial || templateSpec.useDecorators) {\n        container.decorators = container.merge(options.decorators, env.decorators);\n      }\n    } else {\n      container.helpers = options.helpers;\n      container.partials = options.partials;\n      container.decorators = options.decorators;\n    }\n  };\n\n  ret._child = function(i, data, blockParams, depths) {\n    if (templateSpec.useBlockParams && !blockParams) {\n      throw new Exception('must pass block params');\n    }\n    if (templateSpec.useDepths && !depths) {\n      throw new Exception('must pass parent depths');\n    }\n\n    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);\n  };\n  return ret;\n}\n\nexport function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {\n  function prog(context, options = {}) {\n    let currentDepths = depths;\n    if (depths && context !== depths[0]) {\n      currentDepths = [context].concat(depths);\n    }\n\n    return fn(container,\n        context,\n        container.helpers, container.partials,\n        options.data || data,\n        blockParams && [options.blockParams].concat(blockParams),\n        currentDepths);\n  }\n\n  prog = executeDecorators(fn, prog, container, depths, data, blockParams);\n\n  prog.program = i;\n  prog.depth = depths ? depths.length : 0;\n  prog.blockParams = declaredBlockParams || 0;\n  return prog;\n}\n\nexport function resolvePartial(partial, context, options) {\n  if (!partial) {\n    if (options.name === '@partial-block') {\n      partial = options.data['partial-block'];\n    } else {\n      partial = options.partials[options.name];\n    }\n  } else if (!partial.call && !options.name) {\n    // This is a dynamic partial that returned a string\n    options.name = partial;\n    partial = options.partials[partial];\n  }\n  return partial;\n}\n\nexport function invokePartial(partial, context, options) {\n  options.partial = true;\n  if (options.ids) {\n    options.data.contextPath = options.ids[0] || options.data.contextPath;\n  }\n\n  let partialBlock;\n  if (options.fn && options.fn !== noop) {\n    options.data = createFrame(options.data);\n    partialBlock = options.data['partial-block'] = options.fn;\n\n    if (partialBlock.partials) {\n      options.partials = Utils.extend({}, options.partials, partialBlock.partials);\n    }\n  }\n\n  if (partial === undefined && partialBlock) {\n    partial = partialBlock;\n  }\n\n  if (partial === undefined) {\n    throw new Exception('The partial ' + options.name + ' could not be found');\n  } else if (partial instanceof Function) {\n    return partial(context, options);\n  }\n}\n\nexport function noop() { return ''; }\n\nfunction initData(context, data) {\n  if (!data || !('root' in data)) {\n    data = data ? createFrame(data) : {};\n    data.root = context;\n  }\n  return data;\n}\n\nfunction executeDecorators(fn, prog, container, depths, data, blockParams) {\n  if (fn.decorator) {\n    let props = {};\n    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);\n    Utils.extend(prog, props);\n  }\n  return prog;\n}\n","// Build out our basic SafeString type\nfunction SafeString(string) {\n  this.string = string;\n}\n\nSafeString.prototype.toString = SafeString.prototype.toHTML = function() {\n  return '' + this.string;\n};\n\nexport default SafeString;\n","const escape = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n  '=': '&#x3D;'\n};\n\nconst badChars = /[&<>\"'`=]/g,\n      possible = /[&<>\"'`=]/;\n\nfunction escapeChar(chr) {\n  return escape[chr];\n}\n\nexport function extend(obj /* , ...source */) {\n  for (let i = 1; i < arguments.length; i++) {\n    for (let key in arguments[i]) {\n      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {\n        obj[key] = arguments[i][key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nexport let toString = Object.prototype.toString;\n\n// Sourced from lodash\n// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt\n/* eslint-disable func-style */\nlet isFunction = function(value) {\n  return typeof value === 'function';\n};\n// fallback for older versions of Chrome and Safari\n/* istanbul ignore next */\nif (isFunction(/x/)) {\n  isFunction = function(value) {\n    return typeof value === 'function' && toString.call(value) === '[object Function]';\n  };\n}\nexport {isFunction};\n/* eslint-enable func-style */\n\n/* istanbul ignore next */\nexport const isArray = Array.isArray || function(value) {\n  return (value && typeof value === 'object') ? toString.call(value) === '[object Array]' : false;\n};\n\n// Older IE versions do not directly support indexOf so we must implement our own, sadly.\nexport function indexOf(array, value) {\n  for (let i = 0, len = array.length; i < len; i++) {\n    if (array[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n\nexport function escapeExpression(string) {\n  if (typeof string !== 'string') {\n    // don't escape SafeStrings, since they're already safe\n    if (string && string.toHTML) {\n      return string.toHTML();\n    } else if (string == null) {\n      return '';\n    } else if (!string) {\n      return string + '';\n    }\n\n    // Force a string conversion as this will be done by the append regardless and\n    // the regex test will do this transparently behind the scenes, causing issues if\n    // an object's to string has escaped characters in it.\n    string = '' + string;\n  }\n\n  if (!possible.test(string)) { return string; }\n  return string.replace(badChars, escapeChar);\n}\n\nexport function isEmpty(value) {\n  if (!value && value !== 0) {\n    return true;\n  } else if (isArray(value) && value.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function createFrame(object) {\n  let frame = extend({}, object);\n  frame._parent = object;\n  return frame;\n}\n\nexport function blockParams(params, ids) {\n  params.path = ids;\n  return params;\n}\n\nexport function appendContextPath(contextPath, id) {\n  return (contextPath ? contextPath + '.' : '') + id;\n}\n","// Create a simple path alias to allow browserify to resolve\n// the runtime on a supported path.\nmodule.exports = require('./dist/cjs/handlebars.runtime')['default'];\n","module.exports = require(\"handlebars/runtime\")[\"default\"];\n","tmpl = require('./tmpl/test.hbs')\nGroupView = require('../open_bets/group.coffee')\nGroupModel = require('../open_bets/models.coffee').GroupModel\nGameModel = require('../open_bets/models.coffee').GameModel\nTeamModel = require('../open_bets/models.coffee').TeamModel\n\nclass Test extends Marionette.LayoutView\n    template: tmpl\n    className: \"test\"\n    type: 'all_bets'\n\ngames =\n    [{\n        home: 'arg',\n        away: 'ger',\n        group: 'A'\n    },\n    {\n        home: 'arg',\n        away: 'bra',\n        group: 'A'\n    },\n    {\n        home: 'arg',\n        away: 'fra',\n        group: 'A'\n    },\n    {\n        home: 'bra',\n        away: 'ger',\n        group: 'A'\n    },\n    {\n        home: 'bra',\n        away: 'fra',\n        group: 'A'\n    },\n    {\n        home: 'fra',\n        away: 'ger',\n        group: 'A'\n    }]\n\ngame_models = []\nfor game, index in games\n    game.id = index\n    game_models.push(new GameModel(game))\n\nteams = []\nfor a in ['fra', 'bra', 'ger', 'arg']\n    teams.push(new TeamModel(name:a))\n\n\na = undefined\n\nclass ab extends Marionette.LayoutView\n    template: tmpl\n    regions:\n        a: '.test'\n\n    onRender:()=>\n        @a.show(a)\n\nmodule.exports = ab\n","// hbsfy compiled Handlebars template\nvar HandlebarsCompiler = require('hbsfy/runtime');\nmodule.exports = HandlebarsCompiler.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    return \"<div class=\\\"test\\\">תוצאות</div>\\n\";\n},\"useData\":true});\n","TopHeader = require('./layout/layout.coffee').TopHeader\nMainMenu = require('./layout/layout.coffee').MainMenu\nOpenBets = require('./open_bets/main.coffee')\nAllBets = require('./all_bets/main.coffee')\nsignIn = require('./sign_in/main.coffee')\nLogout = require('./logout/main.coffee')\n\n\nclass App extends Marionette.Application\n    onStart: (options)=>\n        #@getUser()\n        @startMe()\n\n    startMe: (options)=>\n        @addRegions({\n            main: '.main'\n            header: '.header'\n            menu: '.menu'\n        })\n        @topHeader = new TopHeader(options)\n        @mainMenu = new MainMenu(options)\n        @menu.show(@mainMenu)\n        @header.show(@topHeader)\n\n    showMainView: (type)=>\n        #if not @user_id?\n        #    window.location = '/api/login'\n        if @view and type == @view.type\n            return\n        if type == 'open_bets'\n            @view = new OpenBets()\n        else if type == 'all_bets'\n            @view = new AllBets()\n        else if type == 'login'\n            if @user?\n                @view = new Logout(user: @user)\n                @listenTo(@view, 'logout', @logout)\n            else\n                @view = new signIn()\n                @listenTo(@view, 'sign_in', @setUser)\n        @main.show(@view)\n\n    getUser: =>\n        if window.userConfig.id? and window.userConfig.remember?\n            axios.post('/api/verify', {id: userConfig.id, remember: userConfig.remember})\n                .then((response)=>\n                    @startMe()\n                )\n                .catch((error)=>\n                    console.log(error)\n                )\n        else\n            #window.location = '/login'\n\n\n\n$(document).ready(()->\n    app = new App()\n    window.app = app\n    app.start()\n    )\n","headerTmpl = require('./tmpl/topHeader.hbs')\nmenuTmpl = require('./tmpl/menu.hbs')\nmainViewTmpl= require('./tmpl/mainView.hbs')\n\nclass TopHeader extends Marionette.LayoutView\n    template: headerTmpl\n    className: 'TopHeader'\n\n    initialize: ()=>\n        console.log('eshel')\n\nclass MenuView extends Marionette.LayoutView\n    template: menuTmpl\n    className: \"MenuView\"\n\n    initialize: ()=>\n        console.log('menu')\n\nclass MainMenu extends MenuView\n    ui:\n        links: '.nav-item'\n    events:\n        'click @ui.links': 'navigate'\n\n    navigate: (event)=>\n        #event.preventDefault()\n        el = $(event.currentTarget)\n        console.log(el, 'el')\n        link = el.attr('data-attr')\n        window.app.showMainView(link)\n        #window.location = link\n\n    onRender: ()=>\n        console.log(@ui.links, 'links')\n\n\n    initialize: (options)=>\n        @tabs = [\n            {\n                label:'הימורים פתוחים',\n                activeClass: 'active',\n                link: 'open_bets'\n            },\n            {\n                label:'טבלת ניקוד',\n                activeClass: '',\n                link: 'all_bets'\n            },\n            {\n                label:'התחבר',\n                activeClass: '',\n                link: 'login'\n            }\n        ]\n\n    serializeData: =>\n        return {tabs: @tabs}\n\nclass MainView extends Marionette.LayoutView\n    template: mainViewTmpl\n    className: 'MainView'\n\n    serializeData: =>\n        return {\n            title: @title\n            hasMenu: @hasMenu\n        }\n\nmodule.exports = {\n    TopHeader: TopHeader\n    MenuView: MenuView\n    MainMenu: MainMenu\n    MainView: MainView\n}\n","// hbsfy compiled Handlebars template\nvar HandlebarsCompiler = require('hbsfy/runtime');\nmodule.exports = HandlebarsCompiler.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"    <div class=\\\"wrapper\\\">\\n        <div class=\\\"contentRegion col-sm-10\\\">\\n        <div class=\\\"menuRegion col-sm-2\\\">\\n    </div>\\n\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    return \"    <div class=\\\"contentRegion\\\"></div>\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {};\n\n  return \"<h3 class=\\\"mainViewTitle rtl\\\">\"\n    + container.escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"title\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</h3>\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.hasMenu : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.program(3, data, 0),\"data\":data})) != null ? stack1 : \"\");\n},\"useData\":true});\n","// hbsfy compiled Handlebars template\nvar HandlebarsCompiler = require('hbsfy/runtime');\nmodule.exports = HandlebarsCompiler.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"            <li class=\\\"nav-item\\\" data-attr=\\\"\"\n    + alias4(((helper = (helper = helpers.link || (depth0 != null ? depth0.link : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"link\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + alias4(((helper = (helper = helpers.activeClass || (depth0 != null ? depth0.activeClass : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"activeClass\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\\n                <a class=\\\"nav-link\\\">\"\n    + alias4(((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"label\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</a>\\n            </li>\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"<!--nav class=\\\"nav flex-column col-sm-2 rtl bg-dark\\\">\\n  <a class=\\\"nav-link active\\\" href=\\\"\\\">Active</a>\\n  <a class=\\\"nav-link\\\" href=\\\"\\\">Link</a>\\n  <a class=\\\"nav-link\\\" href=\\\"\\\">Link</a>\\n  <a class=\\\"nav-link disabled\\\" href=\\\"\\\">Disabled</a>\\n</nav-->\\n\\n\\n<nav class=\\\"navbar flex-column rtl bg-dark navbar-dark\\\">\\n\\n    <ul class=\\\"navbar-nav\\\">\\n\"\n    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.tabs : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"    </ul>\\n</nav>\\n\";\n},\"useData\":true});\n","// hbsfy compiled Handlebars template\nvar HandlebarsCompiler = require('hbsfy/runtime');\nmodule.exports = HandlebarsCompiler.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    return \"<div class=\\\"jumbotron jumbotron-fluid bg-info rtl\\\">\\n    <div class=\\\"container\\\">\\n        <h1>הימור חברים</h1>\\n        <p>מונדיאל 2018</p>\\n    </div>\\n</div>\\n\";\n},\"useData\":true});\n","logoutTmpl = require('./tmpl/logout.hbs')\n\nclass LogoutLayout extends Marionette.LayoutView\n    template: logoutTmpl\n    className: \"LogoutView\"\n    type: 'login'\n    ui:\n        logout: '.btn'\n        name: '.name'\n    events:\n        'click @ui.logout': 'logout'\n\n    logout: ()=>\n        @trigger('logout')\n\n    onRender: ()=>\n        @ui.name.html(@user.name)\n\n    initialize: (options)=>\n        @user = options.user\n\n\n\nmodule.exports = LogoutLayout\n","// hbsfy compiled Handlebars template\nvar HandlebarsCompiler = require('hbsfy/runtime');\nmodule.exports = HandlebarsCompiler.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    return \"<div class=\\\"container\\\">\\n    <h2 class=\\\"title_msg\\\">\\n        שלום,\\n        <span class=\\\"name\\\"></span>\\n    </h2>\\n    <button class=\\\"btn btn-lg btn-danger btn-block\\\">התנתק</button>\\n</div>\\n\";\n},\"useData\":true});\n","GroupModel = require('./models.coffee').GroupModel\ngroupTmpl = require('./tmpl/group.hbs')\n\nclass GroupView extends Marionette.LayoutView\n    className: 'GroupView'\n    template: groupTmpl\n    regions:\n        gamesRegion: '.gamesRegion'\n\n    initialize: (options)=>\n        @model = options.model\n\n    serializeData: =>\n        games = _.map(@model.getGames(), (game)-> return {\n            homeTeam: game.getHomeTeam(),\n            homeScore: game.getHomeScore(),\n            awayTeam: game.getAwayTeam(),\n            awayScore: game.getAwayScore()\n            })\n        table = _.map(@model.getTable(), (team)->\n            data = team.getData()\n            return{\n                name: team.name\n                points: data.points\n                gf: data.gf\n                ga: data.ga\n                games: _.keys(team.games).length\n            })\n        return {\n            games: games,\n            table: table\n            }\n\nmodule.exports = GroupView\n","a = {\r\n  \"groups\": {\r\n    \"a\": [\r\n      {\r\n        \"id\": 1,\r\n        \"external_id\": \"1\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"a\",\r\n        \"team_home_id\": 1,\r\n        \"team_away_id\": 2,\r\n        \"start_time\": 1528988400,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:24\",\r\n        \"updated_at\": \"2018-05-12 10:28:24\",\r\n        \"team_home_name\": \"Russia\",\r\n        \"team_away_name\": \"Saudi Arabia\"\r\n      },\r\n      {\r\n        \"id\": 2,\r\n        \"external_id\": \"2\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"a\",\r\n        \"team_home_id\": 3,\r\n        \"team_away_id\": 4,\r\n        \"start_time\": 1529064000,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:24\",\r\n        \"updated_at\": \"2018-05-12 10:28:24\",\r\n        \"team_home_name\": \"Egypt\",\r\n        \"team_away_name\": \"Uruguay\"\r\n      },\r\n      {\r\n        \"id\": 3,\r\n        \"external_id\": \"17\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"a\",\r\n        \"team_home_id\": 1,\r\n        \"team_away_id\": 3,\r\n        \"start_time\": 1529431200,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:24\",\r\n        \"updated_at\": \"2018-05-12 10:28:24\",\r\n        \"team_home_name\": \"Russia\",\r\n        \"team_away_name\": \"Egypt\"\r\n      },\r\n      {\r\n        \"id\": 4,\r\n        \"external_id\": \"18\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"a\",\r\n        \"team_home_id\": 4,\r\n        \"team_away_id\": 2,\r\n        \"start_time\": 1529506800,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:24\",\r\n        \"updated_at\": \"2018-05-12 10:28:24\",\r\n        \"team_home_name\": \"Uruguay\",\r\n        \"team_away_name\": \"Saudi Arabia\"\r\n      },\r\n      {\r\n        \"id\": 5,\r\n        \"external_id\": \"33\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"a\",\r\n        \"team_home_id\": 4,\r\n        \"team_away_id\": 1,\r\n        \"start_time\": 1529935200,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:24\",\r\n        \"updated_at\": \"2018-05-12 10:28:24\",\r\n        \"team_home_name\": \"Uruguay\",\r\n        \"team_away_name\": \"Russia\"\r\n      },\r\n      {\r\n        \"id\": 6,\r\n        \"external_id\": \"34\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"a\",\r\n        \"team_home_id\": 2,\r\n        \"team_away_id\": 3,\r\n        \"start_time\": 1529935200,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:24\",\r\n        \"updated_at\": \"2018-05-12 10:28:24\",\r\n        \"team_home_name\": \"Saudi Arabia\",\r\n        \"team_away_name\": \"Egypt\"\r\n      }\r\n    ],\r\n    \"b\": [\r\n      {\r\n        \"id\": 7,\r\n        \"external_id\": \"3\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"b\",\r\n        \"team_home_id\": 5,\r\n        \"team_away_id\": 6,\r\n        \"start_time\": 1529085600,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:24\",\r\n        \"updated_at\": \"2018-05-12 10:28:24\",\r\n        \"team_home_name\": \"Portugal\",\r\n        \"team_away_name\": \"Spain\"\r\n      },\r\n      {\r\n        \"id\": 8,\r\n        \"external_id\": \"4\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"b\",\r\n        \"team_home_id\": 7,\r\n        \"team_away_id\": 8,\r\n        \"start_time\": 1529074800,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:24\",\r\n        \"updated_at\": \"2018-05-12 10:28:24\",\r\n        \"team_home_name\": \"Morocco\",\r\n        \"team_away_name\": \"Iran\"\r\n      },\r\n      {\r\n        \"id\": 9,\r\n        \"external_id\": \"19\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"b\",\r\n        \"team_home_id\": 5,\r\n        \"team_away_id\": 7,\r\n        \"start_time\": 1529496000,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:24\",\r\n        \"updated_at\": \"2018-05-12 10:28:24\",\r\n        \"team_home_name\": \"Portugal\",\r\n        \"team_away_name\": \"Morocco\"\r\n      },\r\n      {\r\n        \"id\": 10,\r\n        \"external_id\": \"20\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"b\",\r\n        \"team_home_id\": 8,\r\n        \"team_away_id\": 6,\r\n        \"start_time\": 1529517600,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:24\",\r\n        \"updated_at\": \"2018-05-12 10:28:24\",\r\n        \"team_home_name\": \"Iran\",\r\n        \"team_away_name\": \"Spain\"\r\n      },\r\n      {\r\n        \"id\": 11,\r\n        \"external_id\": \"35\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"b\",\r\n        \"team_home_id\": 8,\r\n        \"team_away_id\": 5,\r\n        \"start_time\": 1529949600,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:24\",\r\n        \"updated_at\": \"2018-05-12 10:28:24\",\r\n        \"team_home_name\": \"Iran\",\r\n        \"team_away_name\": \"Portugal\"\r\n      },\r\n      {\r\n        \"id\": 12,\r\n        \"external_id\": \"36\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"b\",\r\n        \"team_home_id\": 6,\r\n        \"team_away_id\": 7,\r\n        \"start_time\": 1529949600,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:24\",\r\n        \"updated_at\": \"2018-05-12 10:28:24\",\r\n        \"team_home_name\": \"Spain\",\r\n        \"team_away_name\": \"Morocco\"\r\n      }\r\n    ],\r\n    \"c\": [\r\n      {\r\n        \"id\": 13,\r\n        \"external_id\": \"5\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"c\",\r\n        \"team_home_id\": 9,\r\n        \"team_away_id\": 10,\r\n        \"start_time\": 1529143200,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:24\",\r\n        \"updated_at\": \"2018-05-12 10:28:24\",\r\n        \"team_home_name\": \"France\",\r\n        \"team_away_name\": \"Australia\"\r\n      },\r\n      {\r\n        \"id\": 14,\r\n        \"external_id\": \"6\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"c\",\r\n        \"team_home_id\": 11,\r\n        \"team_away_id\": 12,\r\n        \"start_time\": 1529164800,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:25\",\r\n        \"updated_at\": \"2018-05-12 10:28:25\",\r\n        \"team_home_name\": \"Peru\",\r\n        \"team_away_name\": \"Denmark\"\r\n      },\r\n      {\r\n        \"id\": 15,\r\n        \"external_id\": \"21\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"c\",\r\n        \"team_home_id\": 9,\r\n        \"team_away_id\": 11,\r\n        \"start_time\": 1529593200,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:25\",\r\n        \"updated_at\": \"2018-05-12 10:28:25\",\r\n        \"team_home_name\": \"France\",\r\n        \"team_away_name\": \"Peru\"\r\n      },\r\n      {\r\n        \"id\": 16,\r\n        \"external_id\": \"22\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"c\",\r\n        \"team_home_id\": 12,\r\n        \"team_away_id\": 10,\r\n        \"start_time\": 1529582400,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:25\",\r\n        \"updated_at\": \"2018-05-12 10:28:25\",\r\n        \"team_home_name\": \"Denmark\",\r\n        \"team_away_name\": \"Australia\"\r\n      },\r\n      {\r\n        \"id\": 17,\r\n        \"external_id\": \"37\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"c\",\r\n        \"team_home_id\": 12,\r\n        \"team_away_id\": 9,\r\n        \"start_time\": 1530021600,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:25\",\r\n        \"updated_at\": \"2018-05-12 10:28:25\",\r\n        \"team_home_name\": \"Denmark\",\r\n        \"team_away_name\": \"France\"\r\n      },\r\n      {\r\n        \"id\": 18,\r\n        \"external_id\": \"38\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"c\",\r\n        \"team_home_id\": 10,\r\n        \"team_away_id\": 11,\r\n        \"start_time\": 1530025200,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:25\",\r\n        \"updated_at\": \"2018-05-12 10:28:25\",\r\n        \"team_home_name\": \"Australia\",\r\n        \"team_away_name\": \"Peru\"\r\n      }\r\n    ],\r\n    \"d\": [\r\n      {\r\n        \"id\": 19,\r\n        \"external_id\": \"7\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"d\",\r\n        \"team_home_id\": 13,\r\n        \"team_away_id\": 14,\r\n        \"start_time\": 1529154000,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:25\",\r\n        \"updated_at\": \"2018-05-12 10:28:25\",\r\n        \"team_home_name\": \"Argentina\",\r\n        \"team_away_name\": \"Iceland\"\r\n      },\r\n      {\r\n        \"id\": 20,\r\n        \"external_id\": \"8\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"d\",\r\n        \"team_home_id\": 15,\r\n        \"team_away_id\": 16,\r\n        \"start_time\": 1529175600,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:25\",\r\n        \"updated_at\": \"2018-05-12 10:28:25\",\r\n        \"team_home_name\": \"Croatia\",\r\n        \"team_away_name\": \"Nigeria\"\r\n      },\r\n      {\r\n        \"id\": 21,\r\n        \"external_id\": \"23\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"d\",\r\n        \"team_home_id\": 13,\r\n        \"team_away_id\": 15,\r\n        \"start_time\": 1529604000,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:25\",\r\n        \"updated_at\": \"2018-05-12 10:28:25\",\r\n        \"team_home_name\": \"Argentina\",\r\n        \"team_away_name\": \"Croatia\"\r\n      },\r\n      {\r\n        \"id\": 22,\r\n        \"external_id\": \"24\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"d\",\r\n        \"team_home_id\": 16,\r\n        \"team_away_id\": 14,\r\n        \"start_time\": 1529679600,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:25\",\r\n        \"updated_at\": \"2018-05-12 10:28:25\",\r\n        \"team_home_name\": \"Nigeria\",\r\n        \"team_away_name\": \"Iceland\"\r\n      },\r\n      {\r\n        \"id\": 23,\r\n        \"external_id\": \"39\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"d\",\r\n        \"team_home_id\": 16,\r\n        \"team_away_id\": 13,\r\n        \"start_time\": 1530036000,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:25\",\r\n        \"updated_at\": \"2018-05-12 10:28:25\",\r\n        \"team_home_name\": \"Nigeria\",\r\n        \"team_away_name\": \"Argentina\"\r\n      },\r\n      {\r\n        \"id\": 24,\r\n        \"external_id\": \"40\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"d\",\r\n        \"team_home_id\": 14,\r\n        \"team_away_id\": 15,\r\n        \"start_time\": 1530036000,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:25\",\r\n        \"updated_at\": \"2018-05-12 10:28:25\",\r\n        \"team_home_name\": \"Iceland\",\r\n        \"team_away_name\": \"Croatia\"\r\n      }\r\n    ],\r\n    \"e\": [\r\n      {\r\n        \"id\": 25,\r\n        \"external_id\": \"9\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"e\",\r\n        \"team_home_id\": 17,\r\n        \"team_away_id\": 18,\r\n        \"start_time\": 1529258400,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:25\",\r\n        \"updated_at\": \"2018-05-12 10:28:25\",\r\n        \"team_home_name\": \"Brazil\",\r\n        \"team_away_name\": \"Switzerland\"\r\n      },\r\n      {\r\n        \"id\": 26,\r\n        \"external_id\": \"10\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"e\",\r\n        \"team_home_id\": 19,\r\n        \"team_away_id\": 20,\r\n        \"start_time\": 1529236800,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:25\",\r\n        \"updated_at\": \"2018-05-12 10:28:25\",\r\n        \"team_home_name\": \"Costa Rica\",\r\n        \"team_away_name\": \"Serbia\"\r\n      },\r\n      {\r\n        \"id\": 27,\r\n        \"external_id\": \"25\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"e\",\r\n        \"team_home_id\": 17,\r\n        \"team_away_id\": 19,\r\n        \"start_time\": 1529668800,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:25\",\r\n        \"updated_at\": \"2018-05-12 10:28:25\",\r\n        \"team_home_name\": \"Brazil\",\r\n        \"team_away_name\": \"Costa Rica\"\r\n      },\r\n      {\r\n        \"id\": 28,\r\n        \"external_id\": \"26\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"e\",\r\n        \"team_home_id\": 20,\r\n        \"team_away_id\": 18,\r\n        \"start_time\": 1529690400,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:25\",\r\n        \"updated_at\": \"2018-05-12 10:28:25\",\r\n        \"team_home_name\": \"Serbia\",\r\n        \"team_away_name\": \"Switzerland\"\r\n      },\r\n      {\r\n        \"id\": 29,\r\n        \"external_id\": \"41\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"e\",\r\n        \"team_home_id\": 20,\r\n        \"team_away_id\": 17,\r\n        \"start_time\": 1530122400,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:25\",\r\n        \"updated_at\": \"2018-05-12 10:28:25\",\r\n        \"team_home_name\": \"Serbia\",\r\n        \"team_away_name\": \"Brazil\"\r\n      },\r\n      {\r\n        \"id\": 30,\r\n        \"external_id\": \"42\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"e\",\r\n        \"team_home_id\": 18,\r\n        \"team_away_id\": 19,\r\n        \"start_time\": 1530122400,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:26\",\r\n        \"updated_at\": \"2018-05-12 10:28:26\",\r\n        \"team_home_name\": \"Switzerland\",\r\n        \"team_away_name\": \"Costa Rica\"\r\n      }\r\n    ],\r\n    \"f\": [\r\n      {\r\n        \"id\": 31,\r\n        \"external_id\": \"11\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"f\",\r\n        \"team_home_id\": 21,\r\n        \"team_away_id\": 22,\r\n        \"start_time\": 1529247600,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:26\",\r\n        \"updated_at\": \"2018-05-12 10:28:26\",\r\n        \"team_home_name\": \"Germany\",\r\n        \"team_away_name\": \"Mexico\"\r\n      },\r\n      {\r\n        \"id\": 32,\r\n        \"external_id\": \"12\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"f\",\r\n        \"team_home_id\": 23,\r\n        \"team_away_id\": 24,\r\n        \"start_time\": 1529323200,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:26\",\r\n        \"updated_at\": \"2018-05-12 10:28:26\",\r\n        \"team_home_name\": \"Sweden\",\r\n        \"team_away_name\": \"South Korea\"\r\n      },\r\n      {\r\n        \"id\": 33,\r\n        \"external_id\": \"27\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"f\",\r\n        \"team_home_id\": 21,\r\n        \"team_away_id\": 23,\r\n        \"start_time\": 1529776800,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:26\",\r\n        \"updated_at\": \"2018-05-12 10:28:26\",\r\n        \"team_home_name\": \"Germany\",\r\n        \"team_away_name\": \"Sweden\"\r\n      },\r\n      {\r\n        \"id\": 34,\r\n        \"external_id\": \"28\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"f\",\r\n        \"team_home_id\": 24,\r\n        \"team_away_id\": 22,\r\n        \"start_time\": 1529766000,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:26\",\r\n        \"updated_at\": \"2018-05-12 10:28:26\",\r\n        \"team_home_name\": \"South Korea\",\r\n        \"team_away_name\": \"Mexico\"\r\n      },\r\n      {\r\n        \"id\": 35,\r\n        \"external_id\": \"43\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"f\",\r\n        \"team_home_id\": 24,\r\n        \"team_away_id\": 21,\r\n        \"start_time\": 1530108000,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:26\",\r\n        \"updated_at\": \"2018-05-12 10:28:26\",\r\n        \"team_home_name\": \"South Korea\",\r\n        \"team_away_name\": \"Germany\"\r\n      },\r\n      {\r\n        \"id\": 36,\r\n        \"external_id\": \"44\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"f\",\r\n        \"team_home_id\": 22,\r\n        \"team_away_id\": 23,\r\n        \"start_time\": 1530108000,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:26\",\r\n        \"updated_at\": \"2018-05-12 10:28:26\",\r\n        \"team_home_name\": \"Mexico\",\r\n        \"team_away_name\": \"Sweden\"\r\n      }\r\n    ],\r\n    \"g\": [\r\n      {\r\n        \"id\": 37,\r\n        \"external_id\": \"13\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"g\",\r\n        \"team_home_id\": 25,\r\n        \"team_away_id\": 26,\r\n        \"start_time\": 1529334000,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:26\",\r\n        \"updated_at\": \"2018-05-12 10:28:26\",\r\n        \"team_home_name\": \"Belgium\",\r\n        \"team_away_name\": \"Panama\"\r\n      },\r\n      {\r\n        \"id\": 38,\r\n        \"external_id\": \"14\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"g\",\r\n        \"team_home_id\": 27,\r\n        \"team_away_id\": 28,\r\n        \"start_time\": 1529344800,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:26\",\r\n        \"updated_at\": \"2018-05-12 10:28:26\",\r\n        \"team_home_name\": \"Tunisia\",\r\n        \"team_away_name\": \"England\"\r\n      },\r\n      {\r\n        \"id\": 39,\r\n        \"external_id\": \"29\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"g\",\r\n        \"team_home_id\": 25,\r\n        \"team_away_id\": 27,\r\n        \"start_time\": 1529755200,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:26\",\r\n        \"updated_at\": \"2018-05-12 10:28:26\",\r\n        \"team_home_name\": \"Belgium\",\r\n        \"team_away_name\": \"Tunisia\"\r\n      },\r\n      {\r\n        \"id\": 40,\r\n        \"external_id\": \"30\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"g\",\r\n        \"team_home_id\": 28,\r\n        \"team_away_id\": 26,\r\n        \"start_time\": 1529841600,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:26\",\r\n        \"updated_at\": \"2018-05-12 10:28:26\",\r\n        \"team_home_name\": \"England\",\r\n        \"team_away_name\": \"Panama\"\r\n      },\r\n      {\r\n        \"id\": 41,\r\n        \"external_id\": \"45\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"g\",\r\n        \"team_home_id\": 28,\r\n        \"team_away_id\": 25,\r\n        \"start_time\": 1530208800,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:26\",\r\n        \"updated_at\": \"2018-05-12 10:28:26\",\r\n        \"team_home_name\": \"England\",\r\n        \"team_away_name\": \"Belgium\"\r\n      },\r\n      {\r\n        \"id\": 42,\r\n        \"external_id\": \"46\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"g\",\r\n        \"team_home_id\": 26,\r\n        \"team_away_id\": 27,\r\n        \"start_time\": 1530208800,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:26\",\r\n        \"updated_at\": \"2018-05-12 10:28:26\",\r\n        \"team_home_name\": \"Panama\",\r\n        \"team_away_name\": \"Tunisia\"\r\n      }\r\n    ],\r\n    \"h\": [\r\n      {\r\n        \"id\": 43,\r\n        \"external_id\": \"15\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"h\",\r\n        \"team_home_id\": 29,\r\n        \"team_away_id\": 30,\r\n        \"start_time\": 1529420400,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:26\",\r\n        \"updated_at\": \"2018-05-12 10:28:26\",\r\n        \"team_home_name\": \"Poland\",\r\n        \"team_away_name\": \"Senegal\"\r\n      },\r\n      {\r\n        \"id\": 44,\r\n        \"external_id\": \"16\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"h\",\r\n        \"team_home_id\": 31,\r\n        \"team_away_id\": 32,\r\n        \"start_time\": 1529409600,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:26\",\r\n        \"updated_at\": \"2018-05-12 10:28:26\",\r\n        \"team_home_name\": \"Colombia\",\r\n        \"team_away_name\": \"Japan\"\r\n      },\r\n      {\r\n        \"id\": 45,\r\n        \"external_id\": \"31\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"h\",\r\n        \"team_home_id\": 29,\r\n        \"team_away_id\": 31,\r\n        \"start_time\": 1529852400,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:26\",\r\n        \"updated_at\": \"2018-05-12 10:28:26\",\r\n        \"team_home_name\": \"Poland\",\r\n        \"team_away_name\": \"Colombia\"\r\n      },\r\n      {\r\n        \"id\": 46,\r\n        \"external_id\": \"32\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"h\",\r\n        \"team_home_id\": 32,\r\n        \"team_away_id\": 30,\r\n        \"start_time\": 1529863200,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:26\",\r\n        \"updated_at\": \"2018-05-12 10:28:26\",\r\n        \"team_home_name\": \"Japan\",\r\n        \"team_away_name\": \"Senegal\"\r\n      },\r\n      {\r\n        \"id\": 47,\r\n        \"external_id\": \"47\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"h\",\r\n        \"team_home_id\": 32,\r\n        \"team_away_id\": 29,\r\n        \"start_time\": 1530194400,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:26\",\r\n        \"updated_at\": \"2018-05-12 10:28:26\",\r\n        \"team_home_name\": \"Japan\",\r\n        \"team_away_name\": \"Poland\"\r\n      },\r\n      {\r\n        \"id\": 48,\r\n        \"external_id\": \"48\",\r\n        \"type\": \"groups\",\r\n        \"sub_type\": \"h\",\r\n        \"team_home_id\": 30,\r\n        \"team_away_id\": 31,\r\n        \"start_time\": 1530194400,\r\n        \"result_home\": null,\r\n        \"result_away\": null,\r\n        \"score\": null,\r\n        \"created_at\": \"2018-05-12 10:28:26\",\r\n        \"updated_at\": \"2018-05-12 10:28:26\",\r\n        \"team_home_name\": \"Senegal\",\r\n        \"team_away_name\": \"Colombia\"\r\n      }\r\n    ]\r\n  }\r\n}\r\nmodule.exports = a\r\n","tableTmpl = require('./tmpl/table.hbs')\ngroupTmpl = require('./tmpl/group.hbs')\ngroupStageTmpl = require('./tmpl/group_stage.hbs')\ngameTmpl = require('./tmpl/game.hbs')\nMainView = require('../layout/layout.coffee').MainView\nscoreTmpl = require('./tmpl/score.hbs')\nscoreSelectTmpl = require('./tmpl/scoreSelect.hbs')\nGameModel = require('./models.coffee').GameModel\nBetsModel = require('./models.coffee').BetsModel\nGroupsCollection = require('./models.coffee').GroupsCollection\nmainFormTmpl = require('./tmpl/main_form.hbs')\nexample = require('./groups_example.coffee')\nutils = require('../utils.coffee')\n\nclass ScoreSelection extends Marionette.ItemView\n    template: scoreSelectTmpl\n    className: \"ScoreSelection\"\n    ui:\n        buttons: '.btn'\n    events:\n        'click @ui.buttons': 'scoreChange'\n\n    scoreChange: (e)=>\n        target = $(e.currentTarget)\n        @value = target.attr('data-val')\n        @value = if @value == '?' then undefined else @value\n        @triggerChange()\n\n    triggerChange: ()=>\n        @trigger('change', @value)\n\n    onRender: ()=>\n        @.$el.addClass(@extraClass)\n\n    initialize: (options)=>\n        @value = options.value\n        @extraClass = options.class\n        @scoresOpts = [0,1,2,3,4,5,6,7,8,9,10,'?']\n\n\n    serializeData: ->\n        return {\n            scores: @scoresOpts\n        }\n\n\nclass ScoreView extends Marionette.LayoutView\n    template: scoreTmpl\n    className: \"ScoreView\"\n    regions:\n        selectRegion: '.setRegion'\n    ui:\n        score: '.score_select'\n    events:\n        'click @ui.score': 'changeScore'\n\n    changeScore: ()=>\n        console.log('here')\n        @trigger('open', @)\n        @select = new ScoreSelection(value: @score, class: @key)\n        @listenTo(@select, 'change', @setScore)\n        @selectRegion.show(@select)\n\n    setScore: (value)=>\n        if value?\n            value = Number(value)\n        @model.set(@key, value)\n        @trigger('change')\n        @render()\n\n    dismissSelection: ()=>\n        @selectRegion.reset()\n\n    initialize: (options)=>\n        @model = options.model\n        @key = options.key\n\n    serializeData: ->\n        score = @model.get(@key)\n        if score == 0\n            score = '0'\n        return {\n            score: score\n        }\n\nclass GroupTableView extends Marionette.LayoutView\n    template: tableTmpl\n    tagName: 'table'\n    className: 'table'\n\n    serializeData: =>\n        modelTable = @model.getTable()\n        table = _.map(modelTable, (team, index)=>\n            score = team.getData()\n            data = {\n                gf: score.gf\n                ga: score.ga\n                gd: score.gf - score.ga\n                points: score.points\n                played: score.games\n                rank: index + 1\n                name: utils.getHebName(team.get('name'))\n            }\n            console.log(data, 'datas ')\n            return data\n        )\n        return {\n            table: table\n        }\n\nclass GameView extends Marionette.LayoutView\n    template: gameTmpl\n    className: 'GameView'\n    regions:\n        awayRegion: '.awayScore'\n        homeRegion: '.homeScore'\n\n    onRender: ()=>\n        @homeScore = new ScoreView(model: @model, key: 'result_home')\n        @awayScore = new ScoreView(model: @model, key: 'result_away')\n        @listenTo(@awayScore, 'open', @selectionOpened)\n        @listenTo(@homeScore, 'open', @selectionOpened)\n        @listenTo(@homeScore, 'change', @triggerChange)\n        @listenTo(@awayScore, 'change', @triggerChange)\n        @awayRegion.show(@awayScore)\n        @homeRegion.show(@homeScore)\n\n    triggerChange: ()=>\n        @trigger('change')\n\n    selectionOpened: (selection)=>\n        if @openSelection == selection\n            return\n        if @openSelection\n            @openSelection.dismissSelection()\n        @openSelection = selection\n        @trigger('selection_open', selection)\n\n    serializeData: (options)=>\n        return {\n            home: @model.getHomeName()\n            away: @model.getAwayName()\n        }\n\nclass GamesCollectionView extends Marionette.CollectionView\n    childView: GameView\n    className: 'GamesCollectionView'\n    childEvents:\n        'selection_open': 'selectionOpened'\n        'change': 'triggerChange'\n\n    selectionOpened: (child, selection)=>\n        @children.each((game)->\n            game.selectionOpened(selection)\n        )\n\n    triggerChange: ()=>\n        @trigger('change')\n\nclass GroupView extends Marionette.LayoutView\n    template: groupTmpl\n    className: 'GroupView rtl'\n    regions:\n        gamesRegion: '.games'\n        tableRegion: '.groupTable'\n\n    onRender: ()=>\n        @gamesView = new GamesCollectionView(collection: @model.gamesCollection)\n        @listenTo(@gamesView, 'change', @renderTable)\n        @gamesRegion.show(@gamesView)\n        @renderTable()\n\n    renderTable: ()=>\n        @tableView = new GroupTableView(model: @model)\n        @tableRegion.show(@tableView)\n    ###serializeData: =>\n        modelTable = @model.getTable()\n        table = _.map(modelTable, (team, index)=>\n            score = team.getData()\n            return {\n                gf: score.gf\n                ga: score.ga\n                gd: score.gf - score.ga\n                points: score.points\n                played: _.keys(team.games).length\n                rank: index + 1\n                name: utils.getHebName(team.get('name'))\n            }\n        )\n        games = _.map(@model.gamesCollection.models, (model)=>\n            return\n                team_away_name: utils.getHebName(model.get('team_away_name'))\n                team_home_name: utils.getHebName(model.get('team_home_name'))\n                result_away: model.get('result_away')\n                result_home: model.get('result_home')\n        )\n        #console.log(@model, 'model')\n        return {\n            games: games\n        }###\n\n\nclass GroupsView extends Marionette.CollectionView\n    childView: GroupView\n\n\nclass GroupStageView extends Marionette.LayoutView\n    template: groupStageTmpl\n    className: 'GroupStageView'\n    regions:\n        groupRegion: '.groups'\n\n    onRender: ()=>\n        for group in @groups\n            id = group.getId()\n            @addRegions({\"group_#{id}_region\": \"#group_\" + id.toUpperCase() })\n            groupView = new GroupView(model: group)\n            @[\"group_#{id}_region\"].show(groupView)\n        #@groupsView = new GroupsView(collection: @betsModel.groupsCollection)\n        #console.log(@groupsView, 'gr')\n        #@groupsRegion.show(@groupsView)\n\n    initialize: (options)=>\n        @betsModel = options.betsModel\n        @groups = @betsModel.groupsCollection.models\n\n    serializeData: =>\n        groups = _.map(@groups, (model, index) ->\n            return {\n                id: model.getId().toUpperCase(),\n                selected: index == 0\n            }\n        ).reverse()\n        return {\n                groups: groups\n            }\n\n\n\n\nclass MainForm extends Marionette.LayoutView\n    template: mainFormTmpl\n    className: 'MainForm'\n    regions:\n        #contentRegion: '.content_region'\n        groupsRegion: '#groups'\n        specialRegion: '#special'\n    #events:\n        #'click @ui.groupsTab': 'render'\n        #'click @ui.specialTab': 'render'\n\n    onRender: ()=>\n        @groupStageView = new GroupStageView(betsModel: @betsModel)\n        #@specailBetsView = new SpecialBetsView(betsModel: @betsModel)\n        @groupsRegion.show(@groupStageView)\n\n    initialize: (options)=>\n        @betsModel = options.betsModel\n\n\n\n\nclass OpenBets extends MainView\n    type: 'open_bets'\n    regions:\n        menuRegion: '.menuRegion'\n        contentRegion: '.contentRegion'\n\n    initialize: (options)=>\n        @title = 'משחקים פתוחים'\n        openBets = @getOpenBets()\n        @betsModel = new BetsModel(openBets)\n        #@hasMenu = true\n\n    getOpenBets: ()=>\n        return example\n\n    onRender: ()=>\n        #@content = new GameView(model: new GameModel(home: 'ger', away: 'arg'))\n        @content = new MainForm(betsModel: @betsModel)\n        @contentRegion.show(@content)\n\nmodule.exports = OpenBets\n","utils = require('../utils.coffee')\n\nclass BetsModel extends Backbone.Model\n    getGroupsData: =>\n        @get('groups')\n\n    createGroupModels: ()=>\n        groups = []\n        for group, groupGames of @getGroupsData()\n            groupData = {id: group, games: groupGames}\n            groups.push(groupData)\n        @groupsCollection = new GroupsCollection(groups)\n\n    getData: ()=>\n        bets = []\n        _.each(@groupsCollection, (group)\n            games.push(group.getData())\n        )\n        axios.post('api/bets', bets)\n\n\n    initialize: (options)=>\n        @createGroupModels()\n\nclass GameModel extends Backbone.Model\n\n    getHomeTeam: =>\n        return @get('team_home_id')\n\n    getHomeName: =>\n        return utils.getHebName(@get('team_home_name'))\n\n    getAwayTeam: =>\n        return @get('team_away_id')\n\n    getAwayName: =>\n        return utils.getHebName(@get('team_away_name'))\n\n    getGroup: =>\n        return @get('sub_type')\n\n    getHomeScore: =>\n        return @get('result_home')\n\n    getAwayScore: =>\n        return @get('result_away')\n\n    setHomeScore: (value)=>\n        @set('result_home', value)\n\n    setAwayScore: (value) =>\n        @set('result_away', value)\n\n    isFinished: ()=>\n        console.log(@getAwayScore(), @getHomeScore(), 'resss')\n        return @getAwayScore()? and @getHomeScore()?\n\n    getId: =>\n        return @get('id')\n\n    getType: =>\n        if @model.get('type') == 'groups'\n            return 1\n\n    getData: =>\n        if not @isFinished()?\n            return\n        return {\n            'type_id': @getId()\n            'type': @getType()\n            'data':{\n                'result_home': @getHomeScore()\n                'result_away': @getAwayScore()\n            }\n        }\n\n\nclass TeamModel extends Backbone.Model\n    initialize: (options)=>\n        @name = @get('name')\n        @games = {}\n\n    getId: =>\n        return @get('id')\n\n    updateGame: (game)=>\n        @games[game.getId()] = game\n\n    getGameScore: (game)=>\n        if not game.isFinished()\n            return undefined\n        if game.getHomeTeam() == @getId()\n            return {\n                gf: game.getHomeScore()\n                ga: game.getAwayScore()\n            }\n        else\n            return {\n                gf: game.getAwayScore()\n                ga: game.getHomeScore()\n            }\n\n    getData: (teams)=>\n        points = 0\n        totalGF = 0\n        totalGA = 0\n        games = 0\n        for id, game of @games\n            score = @getGameScore(game)\n            if not score?\n                continue\n            gf = score.gf\n            ga = score.ga\n            if @getId() == game.getHomeTeam()\n                against = game.getAwayTeam()\n            else\n                against = game.getHomeTeam()\n            if teams? and teams.indexOf(against) == -1\n                continue\n            games +=1\n            if gf? and ga?\n                if gf > ga\n                    points += 3\n                else if gf == ga\n                    points += 1\n                totalGF += gf\n                totalGA += ga\n        return {\n            points: points\n            gf: totalGF\n            ga: totalGA\n            games: games\n        }\n\n    compareWith: (team ,miniTableTeams)=>\n        if miniTableTeams?\n            myData = @getData(miniTableTeams)\n            opData = team.getData(miniTableTeams)\n        else\n            myData = @getData()\n            opData = team.getData()\n        if opData.points < myData.points\n            return 1\n        else if opData.points > myData.points\n            return 2\n        else\n            opDiff = opData.gf - opData.ga\n            myDiff = myData.gf - myData.ga\n            if opDiff < myDiff\n                return 1\n            else if opDiff > myDiff\n                return 2\n            else\n                if opData.gf < myData.gf\n                    return 1\n                else if opData.gf > myData.gf\n                    return 2\n                else\n                    return 'x'\n\n\n\nclass GroupModel extends Backbone.Model\n    getGames: =>\n        return @get('games')\n\n    fakeGame: (game)=>\n        game.trigger('change', game)\n\n    getGamesData: =>\n        games = []\n        _.each(@gamesCollection.models, (game) =>\n            data = game.getData()\n            if data?\n                games.push(data)\n        )\n        return games\n\n    getData: =>\n        games = @getGamesData()\n        table = _.map(@getTable(), (team)=>\n            return team.get('name')\n        )\n        groupData = {\n            'type': 2\n            'type_id': @getId()\n            'data': table\n        }\n        return games.concat(groupData)\n\n    getId: =>\n        return @get('id')\n\n    updateGame: (game)=>\n        home = game.getHomeTeam()\n        away = game.getAwayTeam()\n        home = _.find(@teamsCollection.models, (team)=> return team.getId() == game.getHomeTeam())\n        away = _.find(@teamsCollection.models, (team)=> return team.getId() == game.getAwayTeam())\n        away.updateGame(game)\n        home.updateGame(game)\n\n    getTable: ()=>\n        table = []\n        @teamsCollection.models.forEach( (team)=>\n            if table.length == 0\n                table.push(team)\n            else\n                for tableTeam, index in table\n                    isTeamArray = tableTeam instanceof Array\n                    if isTeamArray\n                        compare = team.compareWith(tableTeam[0])\n                    else\n                        compare = team.compareWith(tableTeam)\n                    if compare == 1\n                        table.splice(index, 0, team)\n                        break\n                    else if compare == 'x'\n                        if isTeamArray\n                            tableTeam.push(team)\n                            break\n                        else\n                            table[index] = [tableTeam, team]\n                            break\n                    else if index == table.length - 1\n                        table.push(team)\n        )\n        for teamsArray, index in table\n            if teamsArray instanceof Array\n                miniTable = @getMiniTablePos(teamsArray)\n                for team, miniTableIndex in miniTable\n                    if miniTableIndex + 1 ==  miniTable.length\n                        table.splice(index + miniTableIndex, 1, team)\n                    else\n                        table.splice(index + miniTableIndex, 0, team)\n        return table\n\n    getMiniTablePos: (teams)=>\n        table = []\n        for team, index in teams\n            if table.length == 0\n                table = [team]\n            else\n                for tableTeam, index in table\n                    compare = team.compareWith(tableTeam, teams)\n                if compare == 1\n                    table.splice(index, 0, team)\n                else if compare == 'x'\n                    table.splice(index+1, 0, team)\n                #else if index == table.length - 1\n                #    table.splice(index+1, 0, team)\n        return table\n\n    createTeamModels: ()=>\n        teams = []\n        for game in @getGames()\n            away_data = {id: game.team_away_id, name: game.team_away_name}\n            home_data = {id: game.team_home_id, name: game.team_home_name}\n            if home_data not in teams\n                teams.push(home_data)\n            if away_data not in teams\n                teams.push(away_data)\n        @teamsCollection = new TeamsCollection(teams)\n\n    initialize: (options)=>\n        console.log(@)\n        @name = @get('id')\n        @createTeamModels()\n        @gamesCollection = new GamesCollection(@getGames())\n        @listenTo(@gamesCollection, 'change', @updateGame)\n        @gamesCollection.models.forEach((model)=>@fakeGame(model))\n\nclass TeamsCollection extends Backbone.Collection\n    model: TeamModel\n\nclass GamesCollection extends Backbone.Collection\n    model: GameModel\n    ###modelEvents:\n        'change': 'gameChanged'\n\n    gameChanged: (model)=>\n        @trigger('change', model)###\n\nclass GroupsCollection extends Backbone.Collection\n    model: GroupModel\n\n\n\nmodule.exports = {\n    GameModel: GameModel\n    GroupModel: GroupModel\n    TeamModel: TeamModel\n    BetsModel: BetsModel\n    GroupsCollection: GroupsCollection\n}\n","// hbsfy compiled Handlebars template\nvar HandlebarsCompiler = require('hbsfy/runtime');\nmodule.exports = HandlebarsCompiler.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"<div class=\\\"container home_team\\\">\\n    <div class=\\\"homeScore\\\"></div>\\n    <div class=\\\"home\\\">\"\n    + alias4(((helper = (helper = helpers.home || (depth0 != null ? depth0.home : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"home\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</div>\\n    <div class=\\\"homeFlag\\\">flag\"\n    + alias4(((helper = (helper = helpers.homeFlag || (depth0 != null ? depth0.homeFlag : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"homeFlag\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</div>\\n</div>\\n<div class=\\\"container away_team\\\">\\n    <div class=\\\"awayScore\\\"></div>\\n    <div class=\\\"away\\\">\"\n    + alias4(((helper = (helper = helpers.away || (depth0 != null ? depth0.away : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"away\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</div>\\n    <div class=\\\"awayFlag\\\">flag\"\n    + alias4(((helper = (helper = helpers.awayFlag || (depth0 != null ? depth0.awayFlag : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"awayFlag\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</div>\\n</div>\\n\";\n},\"useData\":true});\n","// hbsfy compiled Handlebars template\nvar HandlebarsCompiler = require('hbsfy/runtime');\nmodule.exports = HandlebarsCompiler.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"    <div class=\\\"game_result\\\">\\n        <span>\"\n    + alias4(((helper = (helper = helpers.team_home_name || (depth0 != null ? depth0.team_home_name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"team_home_name\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</span> - <span>\"\n    + alias4(((helper = (helper = helpers.result_home || (depth0 != null ? depth0.result_home : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"result_home\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</span>\\n        <span>   :   </span>\\n        <span>\"\n    + alias4(((helper = (helper = helpers.team_away_name || (depth0 != null ? depth0.team_away_name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"team_away_name\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</span> - <span>\"\n    + alias4(((helper = (helper = helpers.result_away || (depth0 != null ? depth0.result_away : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"result_away\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</span>\\n    </div>\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"<div class=\\\"groupTable\\\"></div>\\n<!--div class=\\\"results\\\">\\n\"\n    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.games : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"</div-->\\n<div class=\\\"games\\\"></div>\\n\";\n},\"useData\":true});\n","// hbsfy compiled Handlebars template\nvar HandlebarsCompiler = require('hbsfy/runtime');\nmodule.exports = HandlebarsCompiler.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"    <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link\\\" id=\\\"\"\n    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"-tab\\\" data-toggle=\\\"tab\\\" href=\\\"#group_\"\n    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" role=\\\"tab\\\" aria-controls=\\\"\"\n    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" aria-selected=\\\"\"\n    + alias4(((helper = (helper = helpers.selected || (depth0 != null ? depth0.selected : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"selected\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"><span>\"\n    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</span> בית</a>\\n    </li>\\n\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"        <div class=\\\"tab-pane fade \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.selected : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(4, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\\" id=\\\"group_\"\n    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" role=\\\"tabpanel\\\" aria-labelledby=\\\"\"\n    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"-tab\\\"></div>\\n\";\n},\"4\":function(container,depth0,helpers,partials,data) {\n    return \"show active\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=depth0 != null ? depth0 : {};\n\n  return \"<ul class=\\\"nav nav-tabs nav-justified\\\" id=\\\"myTab\\\" role=\\\"tablist\\\">\\n\"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.groups : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"</ul>\\n<div class=\\\"container\\\">\\n    <div class=\\\"tab-content\\\" id=\\\"myTabContent\\\">\\n\"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.groups : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"    </div>\\n    <div class=\\\"groups\\\"></div>\\n</div>\\n\";\n},\"useData\":true});\n","// hbsfy compiled Handlebars template\nvar HandlebarsCompiler = require('hbsfy/runtime');\nmodule.exports = HandlebarsCompiler.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    return \"<ul class=\\\"nav nav-tabs nav-justified\\\" id=\\\"myTab\\\" role=\\\"tablist\\\">\\n    <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link special\\\" id=\\\"special-tab\\\" data-toggle=\\\"tab\\\" href=\\\"#special\\\" role=\\\"tab\\\" aria-controls=\\\"special\\\" aria-selected=\\\"false\\\">הימורים מיוחדים</a>\\n    </li>\\n    <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link active groups\\\" id=\\\"groups-tab\\\" data-toggle=\\\"tab\\\" href=\\\"#groups\\\" role=\\\"tab\\\" aria-controls=\\\"groups\\\" aria-selected=\\\"true\\\">בתים</a>\\n    </li>\\n</ul>\\n<div class=\\\"tab-content\\\" id=\\\"myTabContent\\\">\\n    <div class=\\\"tab-pane fade\\\" id=\\\"special\\\" role=\\\"tabpanel\\\" aria-labelledby=\\\"special-tab\\\"></div>\\n    <div class=\\\"tab-pane fade show active\\\" id=\\\"groups\\\" role=\\\"tabpanel\\\" aria-labelledby=\\\"groups-tab\\\"></div>\\n</div>\\n<button class=\\\"btn btn-lg btn-success btn-block\\\">שלח</button>\\n\";\n},\"useData\":true});\n","// hbsfy compiled Handlebars template\nvar HandlebarsCompiler = require('hbsfy/runtime');\nmodule.exports = HandlebarsCompiler.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"    <span class=\\\"score score_select\\\">\"\n    + container.escapeExpression(((helper = (helper = helpers.score || (depth0 != null ? depth0.score : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"score\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</span>\\n\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    return \"    <span class=\\\"score_select badge badge-primary\\\">בחר</span>\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.score : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.program(3, data, 0),\"data\":data})) != null ? stack1 : \"\")\n    + \"<div class=\\\"setRegion\\\"></div>\\n\";\n},\"useData\":true});\n","// hbsfy compiled Handlebars template\nvar HandlebarsCompiler = require('hbsfy/runtime');\nmodule.exports = HandlebarsCompiler.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var alias1=container.lambda, alias2=container.escapeExpression;\n\n  return \"        <button type=\\\"button\\\" data-val=\"\n    + alias2(alias1(depth0, depth0))\n    + \" class=\\\"btn btn-primary\\\">\"\n    + alias2(alias1(depth0, depth0))\n    + \"</button>\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"<div class=\\\"btn-group\\\">\\n\"\n    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.scores : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"</div>\\n\";\n},\"useData\":true});\n","// hbsfy compiled Handlebars template\nvar HandlebarsCompiler = require('hbsfy/runtime');\nmodule.exports = HandlebarsCompiler.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"    <tr>\\n        <td>\"\n    + alias4(((helper = (helper = helpers.gd || (depth0 != null ? depth0.gd : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"gd\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</td>\\n        <td>\"\n    + alias4(((helper = (helper = helpers.ga || (depth0 != null ? depth0.ga : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"ga\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</td>\\n        <td>\"\n    + alias4(((helper = (helper = helpers.gf || (depth0 != null ? depth0.gf : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"gf\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</td>\\n        <td>\"\n    + alias4(((helper = (helper = helpers.points || (depth0 != null ? depth0.points : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"points\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</td>\\n        <td>\"\n    + alias4(((helper = (helper = helpers.played || (depth0 != null ? depth0.played : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"played\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</td>\\n        <td>\"\n    + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"name\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</td>\\n        <th scope=\\\"row\\\">\"\n    + alias4(((helper = (helper = helpers.rank || (depth0 != null ? depth0.rank : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"rank\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</th>\\n    </tr>\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"<thead>\\n    <tr>\\n        <th scope=\\\"col\\\">הפרש</th>\\n        <th scope=\\\"col\\\">חובה</th>\\n        <th scope=\\\"col\\\">זכות</th>\\n        <th scope=\\\"col\\\">נקודות</th>\\n        <th scope=\\\"col\\\">משחקים</th>\\n        <th scope=\\\"col\\\">קבוצה</th>\\n        <th scope=\\\"col\\\">#</th>\\n    </tr>\\n</thead>\\n<tbody>\\n\"\n    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.table : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"</tbody>\\n\";\n},\"useData\":true});\n","signInTmpl = require('./tmpl/sign_in.hbs')\n\nclass SignInLayout extends Marionette.LayoutView\n    template: signInTmpl\n    className: \"signInView\"\n    type: 'login'\n    ui:\n        form: '.form-signin'\n        password: '#inputPassword'\n        email: '#inputEmail'\n    events:\n        'submit @ui.form': 'signIn'\n\n    signIn: (e)=>\n        e.preventDefault();\n        postData = {\n            email: @ui.email.val(),\n            password: @ui.password.val()\n        }\n        api = '/api/login'\n        axios.post(api, postData)\n            .then( (response) =>\n                user = response.data\n                @trigger('sing_in', user)\n                )\n            .catch( (error) =>\n                console.log(error)\n                )\n\n\n\nmodule.exports = SignInLayout\n","// hbsfy compiled Handlebars template\nvar HandlebarsCompiler = require('hbsfy/runtime');\nmodule.exports = HandlebarsCompiler.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    return \"<div class=\\\"container\\\">\\n    <form class=\\\"form-signin\\\">\\n        <h2 class=\\\"form-signin-heading\\\">התחבר</h2>\\n        <label for=\\\"inputEmail\\\" class=\\\"sr-only\\\">Email address</label>\\n        <input type=\\\"email\\\" id=\\\"inputEmail\\\" class=\\\"form-control\\\" placeholder=\\\"Email address\\\" required autofocus>\\n        <label for=\\\"inputPassword\\\" class=\\\"sr-only\\\">Password</label>\\n        <input type=\\\"password\\\" id=\\\"inputPassword\\\" class=\\\"form-control inputPassword\\\" placeholder=\\\"Password\\\" required>\\n        <button class=\\\"btn btn-lg btn-primary btn-block\\\" type=\\\"submit\\\">התחבר</button>\\n    </form>\\n</div>\\n\";\n},\"useData\":true});\n","getHebName = (eng) ->\n    map ={\n        \"Russia\": \"רוסיה\",\n        \"Saudi Arabia\": \"ערב הסעודית\",\n        \"Egypt\": \"מצרים\",\n        \"Uruguay\": \"אורוגוואי\",\n        \"Portugal\": \"פורטוגל\",\n        \"Spain\": \"ספרד\",\n        \"Morocco\": \"מרוקו\",\n        \"Iran\": \"איראן\",\n        \"France\": \"צרפת\",\n        \"Australia\": \"אוסטרליה\",\n        \"Peru\": \"פרו\",\n        \"Denmark\": \"דנמרק\",\n        \"Argentina\": \"ארגנטינה\",\n        \"Iceland\": \"איסלנד\",\n        \"Croatia\": \"קרואטיה\",\n        \"Nigeria\": \"ניגריה\",\n        \"Brazil\": \"ברזיל\",\n        \"Switzerland\": \"שוויץ\",\n        \"Costa Rica\": \"קוסטה ריקה\",\n        \"Serbia\": \"סרביה\",\n        \"Germany\": \"גרמניה\",\n        \"Mexico\": \"מקסיקו\",\n        \"Sweden\": \"שבדיה\",\n        \"South Korea\": \"דרום קוריאה\",\n        \"Belgium\": \"בלגיה\",\n        \"Panama\": \"פנמה\",\n        \"Tunisia\": \"תוניסיה\",\n        \"England\": \"אנגליה\",\n        \"Poland\": \"פולין\",\n        \"Senegal\": \"סנגל\",\n        \"Colombia\": \"קולומביה\",\n        \"Japan\": \"יפן\"\n    }\n\n    return map[eng] ? eng\n\nmodule.exports =\n    getHebName: getHebName\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}